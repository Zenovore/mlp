// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mlflow "github.com/caraml-dev/mlp/api/pkg/client/mlflow"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteExperiment provides a mock function with given fields: ctx, ExperimentID, deleteArtifact
func (_m *Service) DeleteExperiment(ctx context.Context, ExperimentID string, deleteArtifact bool) error {
	ret := _m.Called(ctx, ExperimentID, deleteArtifact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, ExperimentID, deleteArtifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRun provides a mock function with given fields: ctx, RunID, artifactURL, deleteArtifact
func (_m *Service) DeleteRun(ctx context.Context, RunID string, artifactURL string, deleteArtifact bool) error {
	ret := _m.Called(ctx, RunID, artifactURL, deleteArtifact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, RunID, artifactURL, deleteArtifact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// searchRunData provides a mock function with given fields: RunID
func (_m *Service) searchRunData(RunID string) (mlflow.SearchRunResponse, error) {
	ret := _m.Called(RunID)

	var r0 mlflow.SearchRunResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (mlflow.SearchRunResponse, error)); ok {
		return rf(RunID)
	}
	if rf, ok := ret.Get(0).(func(string) mlflow.SearchRunResponse); ok {
		r0 = rf(RunID)
	} else {
		r0 = ret.Get(0).(mlflow.SearchRunResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(RunID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// searchRunsForExperiment provides a mock function with given fields: ExperimentID
func (_m *Service) searchRunsForExperiment(ExperimentID string) (mlflow.SearchRunsResponse, error) {
	ret := _m.Called(ExperimentID)

	var r0 mlflow.SearchRunsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (mlflow.SearchRunsResponse, error)); ok {
		return rf(ExperimentID)
	}
	if rf, ok := ret.Get(0).(func(string) mlflow.SearchRunsResponse); ok {
		r0 = rf(ExperimentID)
	} else {
		r0 = ret.Get(0).(mlflow.SearchRunsResponse)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ExperimentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
